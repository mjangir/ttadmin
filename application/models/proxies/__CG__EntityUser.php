<?php

namespace Proxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR.
 */
class __CG__EntityUser extends \Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *               three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *               initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var bool flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();

    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        $this->__initializer__ = $initializer;
        $this->__cloner__ = $cloner;
    }

    /**
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', ''."\0".'Entity\\User'."\0".'id', ''."\0".'Entity\\User'."\0".'username', ''."\0".'Entity\\User'."\0".'firstName', ''."\0".'Entity\\User'."\0".'middleName', ''."\0".'Entity\\User'."\0".'lastName', ''."\0".'Entity\\User'."\0".'gender', ''."\0".'Entity\\User'."\0".'birthDate', ''."\0".'Entity\\User'."\0".'bloodGroup', ''."\0".'Entity\\User'."\0".'phone', ''."\0".'Entity\\User'."\0".'photo', ''."\0".'Entity\\User'."\0".'email', ''."\0".'Entity\\User'."\0".'password', ''."\0".'Entity\\User'."\0".'salt', ''."\0".'Entity\\User'."\0".'forgotPwdSalt', ''."\0".'Entity\\User'."\0".'createdOn', ''."\0".'Entity\\User'."\0".'createdBy', ''."\0".'Entity\\User'."\0".'updatedOn', ''."\0".'Entity\\User'."\0".'updatedBy', ''."\0".'Entity\\User'."\0".'status', ''."\0".'Entity\\User'."\0".'role', ''."\0".'Entity\\User'."\0".'country', ''."\0".'Entity\\User'."\0".'userGroup');
        }

        return array('__isInitialized__', ''."\0".'Entity\\User'."\0".'id', ''."\0".'Entity\\User'."\0".'username', ''."\0".'Entity\\User'."\0".'firstName', ''."\0".'Entity\\User'."\0".'middleName', ''."\0".'Entity\\User'."\0".'lastName', ''."\0".'Entity\\User'."\0".'gender', ''."\0".'Entity\\User'."\0".'birthDate', ''."\0".'Entity\\User'."\0".'bloodGroup', ''."\0".'Entity\\User'."\0".'phone', ''."\0".'Entity\\User'."\0".'photo', ''."\0".'Entity\\User'."\0".'email', ''."\0".'Entity\\User'."\0".'password', ''."\0".'Entity\\User'."\0".'salt', ''."\0".'Entity\\User'."\0".'forgotPwdSalt', ''."\0".'Entity\\User'."\0".'createdOn', ''."\0".'Entity\\User'."\0".'createdBy', ''."\0".'Entity\\User'."\0".'updatedOn', ''."\0".'Entity\\User'."\0".'updatedBy', ''."\0".'Entity\\User'."\0".'status', ''."\0".'Entity\\User'."\0".'role', ''."\0".'Entity\\User'."\0".'country', ''."\0".'Entity\\User'."\0".'userGroup');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if (!$this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if (!array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy.
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) parent::getId();
        }

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritdoc}
     */
    public function setUsername($username)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritdoc}
     */
    public function getUsername()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritdoc}
     */
    public function setFirstName($firstName)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', array($firstName));

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritdoc}
     */
    public function getFirstName()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', array());

        return parent::getFirstName();
    }

    /**
     * {@inheritdoc}
     */
    public function setMiddleName($middleName)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMiddleName', array($middleName));

        return parent::setMiddleName($middleName);
    }

    /**
     * {@inheritdoc}
     */
    public function getMiddleName()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMiddleName', array());

        return parent::getMiddleName();
    }

    /**
     * {@inheritdoc}
     */
    public function setLastName($lastName)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', array($lastName));

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritdoc}
     */
    public function getLastName()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', array());

        return parent::getLastName();
    }

    /**
     * {@inheritdoc}
     */
    public function setGender($gender)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGender', array($gender));

        return parent::setGender($gender);
    }

    /**
     * {@inheritdoc}
     */
    public function getGender()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', array());

        return parent::getGender();
    }

    /**
     * {@inheritdoc}
     */
    public function setBirthDate($birthDate)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBirthDate', array($birthDate));

        return parent::setBirthDate($birthDate);
    }

    /**
     * {@inheritdoc}
     */
    public function getBirthDate()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBirthDate', array());

        return parent::getBirthDate();
    }

    /**
     * {@inheritdoc}
     */
    public function setBloodGroup($bloodGroup)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBloodGroup', array($bloodGroup));

        return parent::setBloodGroup($bloodGroup);
    }

    /**
     * {@inheritdoc}
     */
    public function getBloodGroup()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBloodGroup', array());

        return parent::getBloodGroup();
    }

    /**
     * {@inheritdoc}
     */
    public function setPhone($phone)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', array($phone));

        return parent::setPhone($phone);
    }

    /**
     * {@inheritdoc}
     */
    public function getPhone()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', array());

        return parent::getPhone();
    }

    /**
     * {@inheritdoc}
     */
    public function setPhoto($photo)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhoto', array($photo));

        return parent::setPhoto($photo);
    }

    /**
     * {@inheritdoc}
     */
    public function getPhoto()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhoto', array());

        return parent::getPhoto();
    }

    /**
     * {@inheritdoc}
     */
    public function setEmail($email)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritdoc}
     */
    public function getEmail()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritdoc}
     */
    public function setPassword($password)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritdoc}
     */
    public function getPassword()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritdoc}
     */
    public function setSalt($salt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', array($salt));

        return parent::setSalt($salt);
    }

    /**
     * {@inheritdoc}
     */
    public function getSalt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', array());

        return parent::getSalt();
    }

    /**
     * {@inheritdoc}
     */
    public function setForgotPwdSalt($forgotPwdSalt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForgotPwdSalt', array($forgotPwdSalt));

        return parent::setForgotPwdSalt($forgotPwdSalt);
    }

    /**
     * {@inheritdoc}
     */
    public function getForgotPwdSalt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForgotPwdSalt', array());

        return parent::getForgotPwdSalt();
    }

    /**
     * {@inheritdoc}
     */
    public function setCreatedOn($createdOn)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedOn', array($createdOn));

        return parent::setCreatedOn($createdOn);
    }

    /**
     * {@inheritdoc}
     */
    public function getCreatedOn()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedOn', array());

        return parent::getCreatedOn();
    }

    /**
     * {@inheritdoc}
     */
    public function setCreatedBy($createdBy)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', array($createdBy));

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritdoc}
     */
    public function getCreatedBy()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', array());

        return parent::getCreatedBy();
    }

    /**
     * {@inheritdoc}
     */
    public function setUpdatedOn($updatedOn)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedOn', array($updatedOn));

        return parent::setUpdatedOn($updatedOn);
    }

    /**
     * {@inheritdoc}
     */
    public function getUpdatedOn()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedOn', array());

        return parent::getUpdatedOn();
    }

    /**
     * {@inheritdoc}
     */
    public function setUpdatedBy($updatedBy)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', array($updatedBy));

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritdoc}
     */
    public function getUpdatedBy()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', array());

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritdoc}
     */
    public function setStatus($status)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritdoc}
     */
    public function getStatus()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritdoc}
     */
    public function setRole(\Entity\Role $role = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', array($role));

        return parent::setRole($role);
    }

    /**
     * {@inheritdoc}
     */
    public function getRole()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', array());

        return parent::getRole();
    }

    /**
     * {@inheritdoc}
     */
    public function setCountry(\Entity\Country $country = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', array($country));

        return parent::setCountry($country);
    }

    /**
     * {@inheritdoc}
     */
    public function getCountry()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', array());

        return parent::getCountry();
    }

    /**
     * {@inheritdoc}
     */
    public function setUserGroup(\Entity\UserGroup $userGroup = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserGroup', array($userGroup));

        return parent::setUserGroup($userGroup);
    }

    /**
     * {@inheritdoc}
     */
    public function getUserGroup()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserGroup', array());

        return parent::getUserGroup();
    }
}
