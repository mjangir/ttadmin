<?php

namespace Proxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR.
 */
class __CG__EntityUser extends \Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *               three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *               initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var bool flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];

    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        $this->__initializer__ = $initializer;
        $this->__cloner__ = $cloner;
    }

    /**
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', ''."\0".'Entity\\User'."\0".'id', ''."\0".'Entity\\User'."\0".'name', ''."\0".'Entity\\User'."\0".'facebookId', ''."\0".'Entity\\User'."\0".'email', ''."\0".'Entity\\User'."\0".'salt', ''."\0".'Entity\\User'."\0".'password', ''."\0".'Entity\\User'."\0".'forgotPwdSalt', ''."\0".'Entity\\User'."\0".'gender', ''."\0".'Entity\\User'."\0".'birthDate', ''."\0".'Entity\\User'."\0".'bloodGroup', ''."\0".'Entity\\User'."\0".'phone', ''."\0".'Entity\\User'."\0".'photo', ''."\0".'Entity\\User'."\0".'status', ''."\0".'Entity\\User'."\0".'createdAt', ''."\0".'Entity\\User'."\0".'updatedAt', ''."\0".'Entity\\User'."\0".'userGroup', ''."\0".'Entity\\User'."\0".'country', ''."\0".'Entity\\User'."\0".'createdBy', ''."\0".'Entity\\User'."\0".'updatedBy'];
        }

        return ['__isInitialized__', ''."\0".'Entity\\User'."\0".'id', ''."\0".'Entity\\User'."\0".'name', ''."\0".'Entity\\User'."\0".'facebookId', ''."\0".'Entity\\User'."\0".'email', ''."\0".'Entity\\User'."\0".'salt', ''."\0".'Entity\\User'."\0".'password', ''."\0".'Entity\\User'."\0".'forgotPwdSalt', ''."\0".'Entity\\User'."\0".'gender', ''."\0".'Entity\\User'."\0".'birthDate', ''."\0".'Entity\\User'."\0".'bloodGroup', ''."\0".'Entity\\User'."\0".'phone', ''."\0".'Entity\\User'."\0".'photo', ''."\0".'Entity\\User'."\0".'status', ''."\0".'Entity\\User'."\0".'createdAt', ''."\0".'Entity\\User'."\0".'updatedAt', ''."\0".'Entity\\User'."\0".'userGroup', ''."\0".'Entity\\User'."\0".'country', ''."\0".'Entity\\User'."\0".'createdBy', ''."\0".'Entity\\User'."\0".'updatedBy'];
    }

    public function __wakeup()
    {
        if (!$this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if (!array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };
        }
    }

    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy.
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritdoc}
     *
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) parent::getId();
        }

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritdoc}
     */
    public function setName($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritdoc}
     */
    public function getName()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritdoc}
     */
    public function setFacebookId($facebookId)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFacebookId', [$facebookId]);

        return parent::setFacebookId($facebookId);
    }

    /**
     * {@inheritdoc}
     */
    public function getFacebookId()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFacebookId', []);

        return parent::getFacebookId();
    }

    /**
     * {@inheritdoc}
     */
    public function setEmail($email)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritdoc}
     */
    public function getEmail()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritdoc}
     */
    public function setSalt($salt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$salt]);

        return parent::setSalt($salt);
    }

    /**
     * {@inheritdoc}
     */
    public function getSalt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritdoc}
     */
    public function setPassword($password)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritdoc}
     */
    public function getPassword()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritdoc}
     */
    public function setForgotPwdSalt($forgotPwdSalt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForgotPwdSalt', [$forgotPwdSalt]);

        return parent::setForgotPwdSalt($forgotPwdSalt);
    }

    /**
     * {@inheritdoc}
     */
    public function getForgotPwdSalt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForgotPwdSalt', []);

        return parent::getForgotPwdSalt();
    }

    /**
     * {@inheritdoc}
     */
    public function setGender($gender)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGender', [$gender]);

        return parent::setGender($gender);
    }

    /**
     * {@inheritdoc}
     */
    public function getGender()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', []);

        return parent::getGender();
    }

    /**
     * {@inheritdoc}
     */
    public function setBirthDate($birthDate)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBirthDate', [$birthDate]);

        return parent::setBirthDate($birthDate);
    }

    /**
     * {@inheritdoc}
     */
    public function getBirthDate()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBirthDate', []);

        return parent::getBirthDate();
    }

    /**
     * {@inheritdoc}
     */
    public function setBloodGroup($bloodGroup)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBloodGroup', [$bloodGroup]);

        return parent::setBloodGroup($bloodGroup);
    }

    /**
     * {@inheritdoc}
     */
    public function getBloodGroup()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBloodGroup', []);

        return parent::getBloodGroup();
    }

    /**
     * {@inheritdoc}
     */
    public function setPhone($phone)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$phone]);

        return parent::setPhone($phone);
    }

    /**
     * {@inheritdoc}
     */
    public function getPhone()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritdoc}
     */
    public function setPhoto($photo)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhoto', [$photo]);

        return parent::setPhoto($photo);
    }

    /**
     * {@inheritdoc}
     */
    public function getPhoto()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhoto', []);

        return parent::getPhoto();
    }

    /**
     * {@inheritdoc}
     */
    public function setStatus($status)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritdoc}
     */
    public function getStatus()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritdoc}
     */
    public function setCreatedAt($createdAt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritdoc}
     */
    public function getCreatedAt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritdoc}
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritdoc}
     */
    public function getUpdatedAt()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritdoc}
     */
    public function setUserGroup(\Entity\UserGroup $userGroup = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserGroup', [$userGroup]);

        return parent::setUserGroup($userGroup);
    }

    /**
     * {@inheritdoc}
     */
    public function getUserGroup()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserGroup', []);

        return parent::getUserGroup();
    }

    /**
     * {@inheritdoc}
     */
    public function setCountry(\Entity\Country $country = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritdoc}
     */
    public function getCountry()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritdoc}
     */
    public function setCreatedBy(\Entity\User $createdBy = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritdoc}
     */
    public function getCreatedBy()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritdoc}
     */
    public function setUpdatedBy(\Entity\User $updatedBy = null)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritdoc}
     */
    public function getUpdatedBy()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }
}
