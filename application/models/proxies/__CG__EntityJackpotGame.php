<?php

namespace Proxies\__CG__\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class JackpotGame extends \Entity\JackpotGame implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'id', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'totalUsersParticipated', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'totalNumberOfBids', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'longestBidDuration', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'lastBidDuration', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'startedOn', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'finishedOn', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'createdAt', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'updatedAt', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'jackpot', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'longestBidWinnerUser', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'lastBidWinnerUser', 'gameUsers');
        }

        return array('__isInitialized__', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'id', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'totalUsersParticipated', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'totalNumberOfBids', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'longestBidDuration', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'lastBidDuration', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'startedOn', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'finishedOn', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'createdAt', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'updatedAt', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'jackpot', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'longestBidWinnerUser', '' . "\0" . 'Entity\\JackpotGame' . "\0" . 'lastBidWinnerUser', 'gameUsers');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (JackpotGame $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalUsersParticipated($totalUsersParticipated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalUsersParticipated', array($totalUsersParticipated));

        return parent::setTotalUsersParticipated($totalUsersParticipated);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalUsersParticipated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalUsersParticipated', array());

        return parent::getTotalUsersParticipated();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalNumberOfBids($totalNumberOfBids)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalNumberOfBids', array($totalNumberOfBids));

        return parent::setTotalNumberOfBids($totalNumberOfBids);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalNumberOfBids()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalNumberOfBids', array());

        return parent::getTotalNumberOfBids();
    }

    /**
     * {@inheritDoc}
     */
    public function setLongestBidDuration($longestBidDuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLongestBidDuration', array($longestBidDuration));

        return parent::setLongestBidDuration($longestBidDuration);
    }

    /**
     * {@inheritDoc}
     */
    public function getLongestBidDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLongestBidDuration', array());

        return parent::getLongestBidDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastBidDuration($lastBidDuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastBidDuration', array($lastBidDuration));

        return parent::setLastBidDuration($lastBidDuration);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastBidDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastBidDuration', array());

        return parent::getLastBidDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartedOn($startedOn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartedOn', array($startedOn));

        return parent::setStartedOn($startedOn);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartedOn', array());

        return parent::getStartedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinishedOn($finishedOn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinishedOn', array($finishedOn));

        return parent::setFinishedOn($finishedOn);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinishedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinishedOn', array());

        return parent::getFinishedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setJackpot(\Entity\Jackpot $jackpot = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJackpot', array($jackpot));

        return parent::setJackpot($jackpot);
    }

    /**
     * {@inheritDoc}
     */
    public function getJackpot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJackpot', array());

        return parent::getJackpot();
    }

    /**
     * {@inheritDoc}
     */
    public function setLongestBidWinnerUser(\Entity\User $longestBidWinnerUser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLongestBidWinnerUser', array($longestBidWinnerUser));

        return parent::setLongestBidWinnerUser($longestBidWinnerUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getLongestBidWinnerUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLongestBidWinnerUser', array());

        return parent::getLongestBidWinnerUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastBidWinnerUser(\Entity\User $lastBidWinnerUser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastBidWinnerUser', array($lastBidWinnerUser));

        return parent::setLastBidWinnerUser($lastBidWinnerUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastBidWinnerUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastBidWinnerUser', array());

        return parent::getLastBidWinnerUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', array());

        return parent::getUsers();
    }

}
